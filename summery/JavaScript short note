JavaScript short note
1. Introduction
2. DOM
3. JavaScript Output  
4. JavaScript Variable
5. Strict Mode
6. JavaScript Operators
7. JavaScript Data Types
8. JavaScript Function
9. JavaScript Object
10. JavaScript Events
11. String Function/Method
24. Regular Expressions
12. Templates literals
13. JavaScript Array
14. Array Function/Method
15. Array Destructuring
16. JavaScript Array Iteration
17. Math Object
18. JavaScript Comparison Operators
19. JavaScript Loop
20. ES6 Arrow Function
21. JavaScript Sets
22. JavaScript Maps
23. JavaScript Conversion
25. JavaScript Errors
26. JavaScript Scope
27. Global Variables
28. this Keyword
29. JavaScript Class
30. JavaScript JSON
31. JavaScript Object Details
32. JavaScript Closures
33. JavaScript Class
34. DOM
35. setInterval() and setTimeout()
36. JS Async
37. Web API	
38. Summery
--------------
1. Introduction
--------------
. JavaScript Official name ECMA Script.
. JavaScript case sensitive.
. Javascript is the synchronous.
. Button as a link
  <button onclick="document.location='default.asp'">HTML Tutorial</button>

--------------
2. DOM
--------------
. DOM stands for Document Object Model.
. Using DOM JavaScript can access HTML elements and can change, add, delete all the elements   .
. Also we can say DOM works as a interface/Connector between HTML and JavaScript.

--------------
i. List of DOM methods:
--------------  
document.getElementById(id)	
document.getElementsByClassName(name)
document.getElementsByTagName(name)
document.querySelector('.class | #id | elementName')
document.querySelectorAll('.class | #id | elementName') 

** document.getElementsByTagName() => This method returns an HTMLCollection Object
** document.querySelectorAll()     => This method returns an NodeList object.

> HTMLCollection items can be accessed by their name, id, or index number.
  but NodeList items can only be accessed by their index number.

------------
Examples:
------------ 
document.getElementsByClassName()
Note:Select All matched class
------------ 
<h2 class="example">A heading</h2>
<p class="example">A paragraph.</p> 
<script>
const className = document.getElementsByClassName("example");
console.log(className);
console.log(className[0])
for (let i = 0; i < className.length; i++) {
className[i].style.backgroundColor = "red";
}
</script>

------------
document.querySelector()
Note:Select first matched element
------------
<h2 class="example">A heading</h2>
<p class="example">A paragraph.</p> 
<script>
const firstNode = document.querySelector(".example");
firstNode.style.backgroundColor = "red";
</script>

------------
document.querySelectorAll()
Note: Select all matched class OR element
------------
<h2 class="example">A heading</h2>
<p class="example">A paragraph.</p> 
<script>
const nodeList = document.querySelectorAll(".example");
console.log(nodeList);
console.log(nodeList[0])
for (let i = 0; i < nodeList.length; i++) {
  nodeList[i].style.backgroundColor = "red";
}
</script>
------------
document.getElementsByTagName()
Note: Select all matched Element
------------
<h2 class="example">A heading</h2>
<h2 class="example">A paragraph.</h2> 
<script>
const htmlCollection = document.getElementsByTagName("h2");
console.log(htmlCollection);
console.log(htmlCollection[0])
for (let i = 0; i < htmlCollection.length; i++) {
htmlCollection[i].style.backgroundColor = "red";
}
</script> 
------------
------------
ii. List of DOM Properties: using those we can change html code
------------
i.   HTML content using      .innerHTML
ii.  HTML css using          .style
iii. HTML attribute using    .src 
iv.  HTML form attribut      .type
v.   HTML form input	      .value
vi.  HTML page URL	       .URL

--------------
Example 1
--------------   
<p>Text</p>
<script>
let p = document.querySelector('p');
p.style.color="#f00";
p.style.fontSize="30px";
</script>

--------------
Example 2
Select multiple elements with same class
-------------- 
<div class="list">
  1 
</div>
<div class="list">
  2 
</div>
<div class="list">
  3
</div>
<div id="demo"></div>
<script>
  let x = document.getElementsByClassName('list');
  let add = '';
  for (let i = 0; i < x.length; i++) {
    add += x[i].innerHTML;
  }
  document.getElementById('demo').innerHTML = add;
</script>

------------
iii. DOM Node
------------
I. Creating new HTML element using Node
---------
<div id="div1">
</div>
<script>
  let addPara = document.createElement('p');
  let addText = document.createTextNode('Hello World');
      addPara.appendChild(addText);
  let parent = document.getElementById('div1');
      parent.appendChild(addPara);
</script>

------------
II. Creating new HTML element anywere - insertBefore()
---------
<div id="div1">
  <p id="p1">This is a paragraph.</p>
  <p id="p2">This is another paragraph.</p>
  <p id="p3">This is another paragraph.</p>
</div>
<script>
  let addPara = document.createElement('p');
  let addText = document.createTextNode('Hello World');
      addPara.appendChild(addText);
  let parent = document.getElementById('div1');
  let p2 = document.getElementById('p2');
      parent.insertBefore(addPara, p2);
</script>

------------
III. Other Node uses:
---------
x.classList.add('className');
e.target.classList.toggle('checked');
e.target.parentElement.remove();


--------------
3. JavaScript Output  
--------------
i.   console.log();
ii.  console.dir();
iii. innerHTML
iv.  alert();
v.   window.print();
vi.  document.write();

--------------
4. JavaScript Variable
--------------
I.   var
II.  let  [Real life coding we only use let]
III. const

----
* Assign a Variable
----
var x; [variable Declearing]
x = 5; [variable assin]
var x = 5; [variable Initialize]
let x = 5; [variable Initialize]


------------
I. var
------------
Example:
var x = 5;
var x = 10;
console.log(x);
//output: 10

------------
II. let
------------
i. Variable define with 'let' can not redefine but we can assign it.

Example:
let x = 5;   
let x = 10;  // X Again redeclear not applicable
console.log(x);
[Syntex Error: x has already decleared]


let x = 5;
var x = 10;
console.log(x);
[Syntex Error: x has already decleared]


Correct Way:
Example:
let x = 5;
    x = 10;
console.log(x);


----
Variable Hoting:
----
Hosting is a default behavior of JavaScript which move declerations to the top.

--------------
5. Strict Mode
--------------
. "use strict";
. When we use Strice mode then we need to code with correct format. 
. Variable Hoting not working on Strict Mode


--------------
6. JavaScript Operators
--------------
let fullName  = firstName + " " + lastName;


--------------
7. JavaScript Data Types
--------------
> JavaScript has 8 Datatypes
  . Numbers
  . Strings
  . Booleans
  . Object
  . Array
  . Date
  . Undefined
  . Null

---------
i. Undefined
---------
A variable without a value, has the value undefined.
Example:
let car;
console.log(typeof car);
output: undefined

Note:
** Variable can be emptied by assing 'undefined'
Example:
let x = [1,2,3,4];
    x = undefined;
    console.log(x)    
    // undefined
    
---------
ii. Empty 
---------
let car = "";
console.log(typeof car);
output: string

---------
iii. Primitive Data Value
---------
. It is simple Data type which do not contain properties and methods.
. Example:
  string
  number
  boolean
  
---------
iv. Null
---------
. In JavaScript null is "nothing" or doesn't exist.
. null is an object.  
. * We can empty an object by assing null.
. * Aso We can empty an object by assing undefined.

------------
*** Difference Between Undefined and Null
------------
. Undefined and null are equal in value but different in data type:
  
Equal in value:
null == undefined          // true

Different in type:
null === undefined         // false

because:
typeof undefined           // undefined
typeof null                // object

--------------
8. JavaScript Function:
--------------
i. Default Parameter
--------------
function name(firstName='Santanu',lastName){
  console.log('My name is'+ ' ' + firstName + ' ' + lastName);
}
name('Santanu', 'Chowdhury');
//output: My name is Santanu Chowdhury.

--------------
ii. (...params)
--------------
function name(firstName,...params){
  console.log(firstName);
  console.log(params);
  console.log(arguments.length);
}
name('Santanu', 1,2,3,4,5);
//output: 
Santanu
[1, 2, 3, 4, 5]
6
---------
iii. Function Arguments:
---------
. Using Funcion Arguments we can access function parameter within
  the Function.

Example:
function name(firstName,lastName){
    console.log(arguments);
    console.log(arguments[0]);
    console.log(arguments.length);
    console.log('My name is'+ ' ' + firstName + ' ' + lastName);
  }
name('Santanu', 'Chowdhury');  


------------
iv. Function Return
------------
. When JavaScript function reaches a  'return' statement, then the 
  function stops executing. If this function call from a statement, then
  return that value.
. If we use 'return' then we can store the return value under a variable.

Example1:
function name(firstName,lastName){
  return firstName + ' ' + lastName;
  console.log('This will not print');
}
let x = name('Santanu', 'Chowdhury');
console.log(x);
//output: Santanu Chowdhury

------------
Note: 
Under any function if we do not use 'return', then the function itself return
a 'undefined' value.
------------
function name(firstName,lastName){
console.log(firstName + ' ' + lastName);
}
let x = name('Santanu', 'Chowdhury');
console.log(x);

//output: Santanu Chowdhury
  	  undefined
  
---------
v. Anonymous Function:
---------
Function without a name called anonymous function.

Example:
<script>
  const x = function (a, b) {return a * b};
  let z = x(4, 3);
  console.log(z);
</script>


---------
vi. Self-Invoking Functions / IIFE
---------
(function() {
  console.log('Hello World');
})();

Note:
. It is also a Anonymous function 

--------------
9. JavaScript Object
--------------
. In JavaScript every thing is Object.
. Object create with 'const' variable
. ***functon within a object called 'Method'

---------
i. Basic Object
---------
const me = {
  firstName:   'Santanu',
  lastName:    'Chowdhury',
  citizenShip: 'Indian',
  designation: 'Web Designer',
  skills : {
    webDesing:"HTML, CSS, JavaScript"
  },
  office:function(){
   return 'I am working in Webmaddy.com';
  },
};
console.log(me.firstName);
console.log(me['firstName']);     //Another way
console.log(me.skills.webDesing);
console.log(me.office());

Note:
'firstName' called key
'Santanu'   called value


---------
ii. Object Methods
---------
I. Object.assign(target, source)		
   > use to Copy source object to target object

II. Object.entries()
   > use to convert Object to Map datatype 

III. Object.fromEntries()
   > Use to convert Map to Object datatype

IV. Object.freeze()
    use to Freezing an object

V. Object.isFrozen()
   Check any Object frozen or not

VII. Object.hasOwn()
   Check any property exist or not

VIII. Object.keys()
   Get object Keys as a Array

IX. Object.values()
  Get object Values as a Array

Example:
--------------
I. Object.assign()
--------------
<script>
const target = { a: 1, b: 2 };
const source = { b: 4, c: 5 };

const returnedTarget = Object.assign(target, source);

console.log(target);
// Expected output: Object { a: 1, b: 4, c: 5 }

console.log(returnedTarget);
// Expected output: Object { a: 1, b: 4, c: 5 }

console.log(returnedTarget === target);
// Expected output: true
</script>

--------------
II. Object.entries()
    Object to Map
--------------
<script>
const me = {
  name: "Santnau",
  age: 32,
};

let mapDataType = Object.entries(me);
console.log(mapDataType);

for(let[key,value] of mapDataType){
  console.log(`${key}:${value}`)
}
//Expected output:
//name : Santanu
//age  : 32
</script>

--------------
III. Object.fromEntries()
   > Map to Object
--------------
<script>
const mapDataType = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

//Map to Object Datatype
let objectDataType = Object.fromEntries(mapDataType);
console.log(objectDataType);

//Expected output:
//{apples: 500, bananas: 300, oranges: 200}
</script>

--------------
IV. Object.freeze()
    use to Freezing an object
--------------
const me = {
  name: "Santnau",
  age: 31,
};

me.age = 32;
console.log(me)
// Expected output: 32

//freezeing the object
Object.freeze(me);

me.age = 33;  // Cannot change when freeze
console.log(me)
// Expected output: 32

delete me.age  // Cannot delete when freeze
console.log(me);
//Expected output: 32

--------------
V. Object.isFrozen()
   Check any Object frozen or not
--------------
const me = {
  name: "Santnau",
  age: 31,
};
//freezeing the object
Object.freeze(me);

//Check Frozen or not
console.log(Object.isFrozen());
// Expected output: true

--------------
VII. Object.hasOwn()
     Check any property exist or not
--------------
const me = {
  name: "Santnau",
  age: 31,
};

console.log(Object.hasOwn(me, 'name'));
// Expected output: true

console.log(Object.hasOwn(me, 'skills'));
// Expected output: false

--------------
IV. Object.keys()
     Get object Keys as a Array
--------------
const me = {
  name: "Santnau",
  age: 31,
};
let arrayDataType = Object.keys(me);
console.log(arrayDataType);
// Expected output:  ['name', 'age']

--------------
V. Object.values()
   Get object Values as a Array
--------------
const me = {
  name: "Santnau",
  age: 31,
};
let arrayDataType = Object.values(me);
console.log(arrayDataType);
// Expected output:  ['Santnau', 31]

---------
iii. Add Two Object
---------
const all = {
  ...me,
  ...work
}
console.log(all);

---------
iv. Object Destructuring
---------
const {firstName} = me;
const {firstName:title} = me;
const {skills:{webDesing}} = me;
const {skills:{webDesing:all}} = me;

console.log(firstName);
console.log(title);
console.log(webDesing);
console.log(all);

-------
v. For in loop in Object
-------
const me = {
firstName:   'Santanu',
lastName:    'Chowdhury'
};

for(let key in me){
  console.log(key, me[key]);
}

---------
vi. this
---------
. With in Object if we use this then it indicate the Parent object.

Example:
----
const me = {
firstName:   'Santanu',
lastName:    'Chowdhury',
designation: 'Web Designer',
summery: function(){
  console.log('My name is' + ' ' + this.firstName + ' ' + this.lastName); 
  },
workSummery: function(){
  this.summery();
  console.log('I am a' + ' ' + this.designation);
  }
};
console.log(me.workSummery());
----

---------
call()
---------
> With the call() method, an object can borrow a method from another object.
> Here we can add more arguments/parameters separately
---------
Example 1:
---------
    const globalMethod = {
      fullName: function(skill="", citizen="") {
        return this.firstName + " " + this.lastName + " " +skill + " " +citizen;
      }
    }
    const person1 = {
      firstName:"Santanu",
      lastName: "Chowdhury",
    }
    const person2 = {
      firstName:"Mayank",
      lastName: "Chowdhury",
    }
   const x = globalMethod.fullName.call(person1);
   console.log(x);

---------
** Passing Extra values
Example 2:
---------
    const globalMethod = {
      fullName: function(skill="", citizen="") {
        return this.firstName + " " + this.lastName + " " +skill + " " +citizen;
      }
    }
    const person1 = {
      firstName:"Santanu",
      lastName: "Chowdhury",
    }
    const person2 = {
      firstName:"Mayank",
      lastName: "Chowdhury",
    }
   const x = globalMethod.fullName.call(person1, "HTML5", "CSS3");
   console.log(x);


---------
apply()
---------
> With the apply() method, an object can borrow a method from another object.
> Here we can add more arguments/parameters as an Array.
> We can find max value for an Array
  Math.max.apply(null, [Array]);
  
---------
Example 1:
---------  
const globalMethod = {
  fullName: function(skill="", citizen="") {
   return this.firstName + " " + this.lastName + " " +skill + " " +citizen;
  }
}
const person1 = {
  firstName:"Santanu",
  lastName: "Chowdhury",
}
const person2 = {
  firstName:"Mayank",
  lastName: "Chowdhury",
}
const x = globalMethod.fullName.call(person1, ['HTML5', 'CSS3']);
console.log(x);

---------
Example 2: Find the lagest value form an Array
--------- 
console.log(Math.max.apply(null,[1,2,3]));

  
---------
bind()
---------
> With the bind() method, an object can borrow a method from another object.
> Here it is to create a new function. 

---------
Example 1:
--------- 
const globalMethod = {
      fullName: function(skill="", citizen="") {
        return this.firstName + " " + this.lastName + " " +skill + " " +citizen;
      }
    }
    const person1 = {
      firstName:"Santanu",
      lastName: "Chowdhury",
    }
    const person2 = {
      firstName:"Mayank",
      lastName: "Chowdhury",
    }
   const x = globalMethod.fullName.bind(person1);
   console.log( x('HTML5', 'CSS3'));

--------- 

---------
ix. Properties can be changed, added, and deleted, 
---------
const me = {
   name : 'Santanu Chowdhury',
   age  : 32,
   eye  : 'Black'
}
   console.log(me);
   me.skill = 'HTML5'; // Add key and value
   me.age = 33 ;       // Edit value
   delete me.eye;      // Delete eye
   
---------
x. Adding a Method to an Object
---------
const me = {
   firstName:   'Santanu',
   lastName:    'Chowdhury',
};
    
me.office = function(){
   return 'I am working in Webmaddy.com';
}
console.log(me.office());

---------
xi. use Built-In Methods on Object Method
---------
const me = {
    firstName :   'Santanu',
    office : function() {
       return ('I am working in Webmaddy.com').toUpperCase();
      }
    };
console.log(me.office());   

---------
Note:
I.  Immutable:
    Primitive values are immutable
    
II. Mutable:
    JavaScript Objects are mutable.

--------------
10. JavaScript Events
--------------
Common HTML events:
  onclick
  onchange
  onmouseover
  onmouseout
  onkeydown
  onload
  > addEventListener

---------
Example 1:
---------
<button onclick="notice()">Alert</button>
<script>
function notice(){
  alert('Hello World');
}
</script>

--------------
Example 2:
--------------   
<input type="text" id="demo" name="number" placeholder="Type Number" />
<input type="submit" onclick="myFunction()">
<div id="result"></div>
<script>
 function myFunction(){
    let x = document.getElementById('demo').value;
    x = x.toUpperCase();
    document.getElementById('result').innerHTML = x;
 }
</script>  

---------
Example 3:
---------
<h1 onclick="this.style.color='red'">Hello World!</h1>
<h1 onclick="this.innerHTML='I love JavaScript'">Hello World!</h1>

---------
Example 4:
---------
<button onclick="test(this)">Alert</button>
<p onclick="test(this)">Alert</p>
<script>
  function test(e){
   e.innerHTML = "test"
  }
</script>

---------
Example 5:
---------
<button onclick="test(event)">Alert</button>
<p onclick="test(event)">Alert</p>
<script>
  function test(e){
    e.target.innerHTML = "test"
  }
</script>  

---------
Example 6:
---------
<Button id="buy1">Buy Now</Button>
<Button id="buy2">Buy Now</Button>
<script>
let buy1 = document.querySelector('#buy1');
buy1.onclick = function(){
buy1.innerHTML = 'Thank You';
window.open("https://www.w3schools.com", '_blank');
}

let buy2 = document.querySelector('#buy2');
buy2.onclick = function(){
buy2.innerHTML = 'Thank You';
window.open("http://www.google.com", '_blank');
}
</script>

---------
> addEventListener
---------
. Here we don't need to add JS code under inline HTML.
. syntax:
  element.addEventListener('event', function, useCapture);
. *** 'event' => 'click' in place of 'onclick'

---------
Example: 1
---------
<button id="button">Click</button>
<script>
  let button = document.getElementById('button');
  button.addEventListener('click', function(){
    console.log('Hello World!');
  });
</script>

---------
Example: 2
DOMContentLoaded event fires when the HTML document has been loaded completely
---------
document.addEventListener("DOMContentLoaded", (event) => {
  console.log("DOM fully loaded and parsed");
});

---------
Example: 3
select multiple element with class and add event
---------
<div class="list">
1 
</div>
<div class="list">
2 
</div>
<div class="list">
3
</div>
<script>
let lists = document.getElementsByClassName('list');
for(list of lists){
console.log(list);
list.addEventListener('click', function(e){
  e.target.style.color="#f00";
  console.log(e.target);
})
}
</script>

----------
* Bubbling(Default) and Capturing:
----------
. In bubbling the inner most element's event is handled first and then the outer. 
  Example:	
  the <p> element's click event is handled first, then the <div> element's click event.

. In capturing the outer most element's event is handled first and then the inner.
  Example:
  the <div> element's click event will be handled first, then the <p> element's click event.
  
  example:
  button.addEventListener('click', function(){
  }, true);


--------------
11. String Function/Method
--------------
i.    length
ii.   Escape Character \
iii.  slice()
iv.   replace()
v.    toUpperCase()
vi.   trim()
vii.  split()
viii. Array.from()
ix.   indexOf()
x.    search()
xi.   includes()  //true OR false

*** replace with Regular Expressions
let x = santanu.jpg
x = x.replace(/.jpg/igm, '.webp');


--------------
24. Regular Expressions
--------------
. To Search text and replace text we use Regular Expessions.

i => It is case-insensitive modifier
g => It is global match modifier.
m => It is multiline matching modifier.

Search()    //return index number
match()     //return Array
replace() 

Example:
--------------
let x = "I love HTML.  html is scripting language";
    x = x.replace(/html/igm, "JavaScript");
    console.log(x);
--------------

Methods:
. test()    //return True OR False
. exec() 

Example:
let x = 'I love HTML.';
   console.log(/html/i.test(x));
   //Output : true


--------------
12. Templates literals
--------------
let name = 'Santanu Chowdhury';
let work = 'Web Desinger and WordPress Developer';
let x = `My name is ${name}.
I am a ${work}`;
console.log(x);


--------------
13. JavaScript Array
--------------
const me = ['Santanu', 'Chowdhury', 'Indian'];

-------
i. Access Array
-------
let x = me[0];
console.log(x);

-------
ii. Change Array Element
-------
me[2] = "Pro Indian";
console.log(me[2]);

-------
iii. Access Full Array
-------
document.getElementById('demo').innerHTML=me;

-------
iv. Check Array or Object
-------
console.log(Array.isArray(me));
//Output:true

-------
v. Difference of Array and Object
-------
. Array use number index so it can be Iterate one by one
. Object use named index so it can not Iterate.

> We will use Array, when we want number index and Iterate one by one.
> We will use Object, when we want name index.

*** Object can not Iterate, But using [Symbol.iterator]() function we can Iterate an Object.

--------------
14. Array Function/Method
--------------
const me = ['Santanu', 'Chowdhury', 'Indian'];

i.    me.length
ii.   me[me.length-1];   	// last Array 
iii.  me.push('Coding'); 	// Add from last
iv.   me.unshift('Mr');  	// Add from fast
v.    me.pop();          	// Remove from last
vi.   me.shift();        	// Remove from fast
vii.  delete me[1];
viii. me.splice(2,0,'Code','Car');	
ix.   me.slice(0,2);
x.    array1.concat(array2,array3); 
xi.   const all  = [...me, ...more];
xii.  const copyMe = [...me];
xiii. sort()			//Alphabet short
xiv.  me.toString();     	//boolean to binary and binary and boolean
xv.   me.join("+"); 
xvi.  Array.from()		//String to Array	
      let x = "Lorem";
      x = Array.from(x);
      console.log(x);
      //['L', 'o', 'r', 'e', 'm']

--------------
15. Array Destructuring
--------------
const me = ['Santanu', 'Chowdhury', 'Indian'];
let [firstName, lastNmae] = me;
console.log(firstName);
console.log(lastNmae);

--------------
16. JavaScript Array Iteration
--------------
i. forEach
-------
const me = ['Santanu', 'Chowdhury', 'Indian'];
me.forEach((x,y) => {
   console.log(x, y);
});
      
-------
ii. map
-------
const me = ['Santanu', 'Chowdhury', 'Indian'];
me.map((x,y) => {
   console.log(x, y);
});

-------
iii. filter
-------
const me = [1,2,3,4,5,6];
const ft = me.filter((x) => {
  return x>3
});
console.log(ft);
//Output: [4, 5, 6]


-------
iv. find
-------
const me = [1,2,3,4,5,6];
const ft = me.find((x) => {
  return x>3
});
console.log(ft);
//Output: 4



--------------
17. Math Object
--------------
i.    Math.round(4.8)  //5
ii.   Math.ceil(4.4)   //5
iii.  Math.trunc(4.9)  //4
iv.   Math.sign(x)     //-1 OR 0 OR 1
v.    Math.pow(5,2)    //25
vi.   Math.sqrt(25)    //5
vii.  Math.abs(-4.5)   //4.5
viii. Math.min(-4.5,0,5,3,-30);   //-30
ix.   Math.max(1,10,50,3,-30)     //50
x.    Math.random()


--------------
18. JavaScript Comparison Operators
--------------

===   Equal value	
      and Equal type

&&    and (both)

||    OR (Any fo them)

!     not

-------
Ternary Operator
-------
let x = (condition)?trueValue:falseValue;

-------
isNaN operator
-------
NaN => Not a Number
Example:
let age = 10;
let result = isNaN(age)?"Given valu is not a number.":"Given valu is a number.";


--------------
19. JavaScript Loop
--------------
MAP Method:
info.map(()=>());             //without curly braces {} use for a single expression. 
info.map(() =>{return()})     //with curly braces {} must use return()  
--------------
const info = [
    { category: "Fruits", price: "$1", stocked: true, name: "Apple" },
    { category: "Fruits", price: "$1", stocked: true, name: "Dragonfruit" },
    { category: "Fruits", price: "$2", stocked: false, name: "Passionfruit" },
  ];
  info.map((index, key) => (
      console.log(`Name is` + ' ' + index.name),
      console.log(`Price is` + ' ' + index.price),
      console.log(`Product ID` + ' ' +key)
  ));
--------------
ii. For loop in Array
-------
const me = ['Santanu', 'Chowdhury', 'Indian'];
for (let i = 0; i < me.length; i++) {
console.log(me[i]);
}

-------
iii. For in loop in Object
-------
const me = {
firstName:   'Santanu',
lastName:    'Chowdhury'
};

for(let x in me){
  console.log(x);
}

-------
Iterble
-------
. In an array we can read data one by one called Iteration,
  And the Array called Iterable Object

. Object is not Iterable because order is not it don't has Index Number.


--------------
20. ES6 Arrow Function
--------------
i. Basic Arrow function:
-------
let name = () =>{
  console.log('My name is Santanu Chowdhury');
}
name();

-------
ii. Arrow Function with Parameter
-------
Example1:
let name = (x) =>{
  console.log(`My name is ${x}`);
}

-------
iii. Arrow Function with Single Statement
-------
let name = (firstName,lastName) => console.log(`My name is  ${firstName} ${lastName}`);

-------
iv. Arrow Function with Single Parameter
     and single statement
-------
let name = x => console.log(`My name is  ${x}`);

-------
v. Arrow Function make 'this' eassy
-------
const me = {
firstName:   'Santanu',
lastName:    'Chowdhury',
designation: ['HTML','CSS','JS'],
office:function(){
   this.designation.forEach((x)=>{
     console.log(`${this.firstName} loves ${x}`)
   })
  },
};
console.log(me.office());

//output:
Santanu loves HTML
Santanu loves CSS
Santanu loves JS


--------------
21. JavaScript Sets
--------------
. Set is a collection of unique values.

. example:
  const x = new Set(["a","b","c"]);
  
. Sets are Objects
  const x = new Set(["a","b","c"]);
  console.log(typeof x);		   //object
  console.log(x instanceof Set);         //true
  

--------------
22. JavaScript Maps
--------------
. An Object was created with Keys & Valus.
  A Map holds pairs of key-value where the keys can be any datatype.

. Example:
  const fruits = new Map([
    ["apples", 500],
    ["bananas", 300],
    ["oranges", 200]
  ]);

. Map are Objects
  console.log(typeof fruits);
  console.log(fruits instanceof Map);
  
--------------
23. JavaScript Conversion
--------------
Strings to Numbers
--------------
i.   Number("3.5")

ii.  Unary + Operator 
     let x = +"5";
     console.log(typeof x);
     
--------------     
Numbers to Strings
--------------
i.  String(100)

--------------
Decimal to Binary
--------------
let x = (50).toString(2);
    console.log(x);

--------------
Binary to Decimal
*Note:add '0b' before binary number.
--------------
let y = (0b110010).toString(10);
    console.log(y);


--------------
25. JavaScript Errors
--------------
   syntax:
   try {
    //test code
   }
   catch(err) {
     console.log(err.message); // ERROR MESSAGE
   }


--------------
26. JavaScript Scope
--------------
. After declear any variable, the accessablity of this varibale 
  define by the JavaScript Scope.

. JavaScript has 3 types of scope:
  Block scope
  Function scope
  Global scope
   - Automatically Global
  Local scope

--------
Block Scope
--------
. let and const are Block Scope.

. Variables with 'let' and 'const' declared inside a { } block 
  cannot be accessed outside the block:
. Example:
  {
    let x = 2;
  }
   // x can NOT be used here

. var not a block scope.

. Varibale declear with var  inside a { } block 
  can be accessed from outside the block.
. Example:
  {
    var x = 2;
  }
  // x CAN be used here

--------
Function Scope
--------
. Variables defined inside a function with 'var', 'let' and 'const'
  are not accessible (visible) from outside the function.

  They all have Function Scope.

. Example:
  ------------
  function myFunction() {
     var carName = "Volvo";   // Function Scope
  }
  ------------
  function myFunction() {
    let carName = "Volvo";   // Function Scope
  }
  ------------
  function myFunction() {
   const carName = "Volvo";   // Function Scope
  }
  ------------

Note:
. ** Var function scope.
. ** let and const is block scope and function scope.

--------------------
Global Scope
--------------------
. Variables declared outside any function and block Scope have Global Scope.
. Global variables can be accessed from anywhere in a JavaScript program.

--------------------
Automatically Global
--------------------
. Inside a function if we assign a variable without declared it,
  then it will be automatically GLOBAL variable.

Example:
--------------------
function myFunction() {
  carName = "Volvo";
}

// code here can use carName

myFunction();



--------------
27. Global Variables
--------------
. 'var' is Global varibale because it belong to the Window Object.
  simply var variable store in Window object.

. 'let' is not Global varibale because it not belong to the Window Object.

. Example
  var aName1 = "TATA";
  let acarName2 = "VOLVO";
      console.dir(window);


--------------
28. this Keyword
--------------
. In JavaScript, 'this', is the Object.

. If we use 'this' under a functon then 'this' denote the Global Window Object
  and strict mode, this under a function returns Undefined.
. If we use 'this' under any object then, 'this' denote the parent Object.
. In an event, this refers to the element.


--------------
29. JavaScript Class
--------------
Concept of Class:
--------------
> In programming, everything is an entity/object.
  Each entity/object belongs to a specific 'Class'.

> For example, let’s say we have three entities: Laptop, Mobile, and Tablet.
  These three entities represent different classes.

> Every entity/object, like Laptop, Mobile, and Tablet,
  has different properties and methods, which are defined in their specific class.

> Now, if I have two laptops, Dell and Lenovo,
  both of these objects belong to the 'Laptop' class.

> Similarly, if I have two mobile phones, Samsung and Mi,
  these objects belong to the 'Mobile' class.

> In short, Laptop, Mobile, and Tablet are classes, and:
   . Dell and Lenovo belong to the 'Laptop' class.
   . Samsung and Mi belong to the 'Mobile' class.

> Before defining a class for any object, think about its properties (attributes) 
  and methods (behaviors or functions).
--------------

. Vanila JavaScript is not Object-oriented programming (OOP) language, so 
  Vanila JavaScript don't have Class concept.
. ECMAScript 2015, introduct Class to introduct OOP.
. Syntax:
  class ClassName {
    constructor() {
        ... 
     }
  }

. class is the buleprint for each object.
-------
Example:1
-------
class Car {
  constructor(name, year) {
     this.name = name;
     this.year = year;
  }
  intro(status='Good'){
    console.log(`${this.name} is bought in the year ${this.year} with ${status} condition.`)
  }
}

const car1 = new Car("TATA", 2023);
const car2 = new Car("Audi", 2022);

console.log(car1.name);
console.log(car2.name);

car1.intro('Best');
car2.intro('well');


--------------
30. JavaScript JSON
--------------
. JSON stands for JavaScript Object Notation
. Using JSON we can get data and display on our web page.
. JSON is language independent.

. JSON string:
  let x = '{"name":"John", "age":30, "car":null}'

. JSON strings into JavaScript objects:
  JSON.parse(x)

. object into a JSON string:
  JSON.stringify(x)

* Local storage accept JSON data as a string so we use 
  JSON.stringify() to add local storage.
---------------
Example:
---------------
 <script>
  let x = `{"name": "Santanu", "email": "santanuchowdhury04@gmail.com", "age":30, "car":null}`;
  console.log(x);
  let j = JSON.parse(x);
  console.log(j)
  let s = JSON.stringify(j);
  console.log(s)
</script>



--------------
31. JavaScript Object Details
--------------
i. Object Accessors ** 
---------
. Getters and setters are the Accessors on JavaScript Object.
. Using Getters and setters we get **Computed Properties**.
. for better data quality we use get and set

Example: Getter
---------
  const me = {
      firstName:   'Santanu',
      lastName:    'Chowdhury',
      get fullName() {
        return this.firstName + ' ' + this.lastName;
      }
    }; 
    
---------
Example: Setter
---------
const me = {
      firstName:   'Santanu',
      lastName:    'Chowdhury',
      citizenShip: '',
      set citizen(citizen) {
        this.citizenShip = citizen;
      }
}; 
me.citizen = "Indian"
console.log(me);
    
---------     
ii. Object Constructors ***
--------- 
Using a function when we create an Object is called Object Constructor.

Example:
--------- 

 function Person(first,last,age) {
      this.firstName = first;
      this.lastName   = last;
      this.age  = age;
      this.fullName = function() {
        return this.firstName + ' ' + this.lastName;
      }
    }
    const santanu = new Person('Santanu', 'Chowdhury', 32, );
    const puja    = new Person('Puja', 'Chowdhury', 30, );
    const mayank    = new Person('Mayank', 'Chowdhury', 1);
    console.log(santanu);
    console.log(santanu.firstName);
    console.log(santanu.fullName());
    
--------- 
Note:
. * Name of a constructor function start with an upper-case first letter.


---------
iii. Object Prototypes	
---------
Using JavaScript 'Prototype' Properties we can add
new properties and methods to Object constructors.
   
Example:   
------------
 String.prototype.myname = function() {
   return 'Santanu Chowdhury';
 }
 Number.prototype.myadd = function() {
   return 'It is my add Function'
 }
let x = 'India';
let y = 10;
console.dir(x.myname());
console.dir(y.myadd());
    
---------
iv. call()
---------
. call is Object method. 
. Using call(), an object can use a method belonging to another object.
---------
Example 1:
---------

const person1 = {
     fullName: function() {
     return this.firstName + " " + this.lastName;
   }
}
const person2 = {
  firstName:"Santanu",
  lastName: "Chowdhury",
}
console.log(person1.fullName.call(person2));

---------
** Passing Extra values
Example 2:
---------
const person1 = {
 fullName: function(skill, citizen) {
 return this.firstName + " " + this.lastName + " " +skill + " " +citizen;
   }
}
const person2 = {
 firstName:"Santanu",
 lastName: "Chowdhury",
}
console.log(person1.fullName.call(person2, 'Web Designer', 'Indian'));
  
---------
v. apply()
---------
. apply() is the Updated version of call()
. In apply() we pass additional parameters using an Array

const person1 = {
  fullName: function(skill, citizen) {
    return this.firstName + " " + this.lastName + "," +skill + "," +citizen;
  }
}
const person2 = {
  firstName:"Santanu",
  lastName: "Chowdhury",
}
console.log(person1.fullName.apply(person2, ['Web Designer', 'Indian']));

--------------------
Find the lagest value form an Array
------------
console.log(Math.max.apply(null,[1,2,3]));
------------
Note: 
  Math.max() do not applicabel for Array but using apply() method
  we can use Array for Math.max to find large number.

    
    	
--------------
32. JavaScript Closures
--------------
. let we have a self-invoking Nested Function
. Using Closures we can invoke a child function from outside the Parent function and since
  the function is self-invoked so parent functon code also execute only once.
  
  OR
  
  Using Closures we can call a child function from outside the self-invoking Nested function.    
  
Example:    

let add = (function(){
      let counter = 0;
      return function(){
        counter += 1;
        console.log(counter);
        return counter;
      }
   })();
   
add(); 
add(); 

--------------
33. JavaScript Class
--------------
** iii. Class Inheritance

--------------
35. setInterval() and setTimeout()
--------------  
setTimeout(function(){
  console.log('test')
},3000);							

setInterval(function(){
  console.log('test')
},3000);									

--------------
36. JS Async
-------------- 
i. Asynchronous JavaScript
ii.  Callbacks
iii. Async/Await 
--------------------
i. Asynchronous JavaScript
--------------------
. JavaScript is Synchronous, means it read code step by setp.
. If any { part of code } we need to execute leter then we have to 
  use setTimeout() function to make JavaScript Asynchronous.

------------
Example 1:
Synchronous
------------
console.log('Print line 1.');
console.log('Print line 2.');
console.log('Print line 3.');

------------
Example 2:
JavaScript Asynchronous behaviour using setTimeout()
------------
console.log('Print line 1.');
setTimeout(function(){
  console.log('Print line 2.');
},0)
console.log('Print line 3.');

------------
Example 3:
JavaScript Asynchronous behaviour using setInterval()
------------
console.log('Print line 1.');
setInterval(function(){
    console.log('Print line 2.');
},1000)
console.log('Print line 3.');

--------------------
ii.  Callbacks
--------------------
. In JavaScript we crate independent function for each task.
. to perform any single task we may connect two independent function 
  using callback features.
. for callback features, use a function as a paramater to another function.
---------
<script>
function display(some) {
  console.log(some);
}
function calculator(num1, num2, testcallback) {
  let sum = num1 + num2;
  if(testcallback){
    testcallback(sum);
  }
}
calculator(5, 5, display);
</script>

--------------------
iii. Async/Await 
--------------------
. If we add 'async' before a function, then the function 
  becomes Asynchronous
. since the function becomes Asynchronous, so to maintain 
  the order we use 'Await' within the function.
. Asynchronous function returns Promice, 
  so to get value use .then  

---------
Basic Structure
---------
<script>
 async function xyz(){
   return "abc";
}
xyz().then(res=>{
  console.log(res);
})
</script>

---------
Example:
---------
<script>
 async function getData(){
  const response = await fetch("https://dummyjson.com/users");
  const data = await response.json(); 
  return data;
}
getData().then(res=>{
  console.log(res);
  res.users.map(x=>{
  console.log(x.id);
  })
})
</script>

---------
Example:
fetch with try{} catch(error){}
---------
  async function getData(){
    let url = `https://dummyjson.com/users`;
    try{
      const res = await fetch(url);
      // if (!res.ok) {
      //   throw new Error(`HTTP error! status: ${res.status}`);
      // }
      const data = await res.json();
      return data;
    }
    catch(error){
      console.error(error.message)
    }
  }
  getData().then((data)=>{
    console.log(data);
  })

--------------
37. Web API	
--------------  
i.   Fetch API
ii.  worker API
iii. Forms API
iv.  Web History API
v.   Storage API

--------------
i.   Fetch API
------------
> Using ASYNC
------------
<button onclick="getData()">Get Data</button>
<div id="demo"></div>
<script>
  const x = document.getElementById('demo');
  async function getData(){
      const response = await fetch("https://dummyjson.com/users");
      const data = await response.text(); 
      console.log(data);
      x.innerText= data; 
  }
</script>

-------------
ii.  worker API
-------------
It is a 'JavaScript Process' that runs in the background,
without affecting the performance of the page.
-------------
STEPs:
-------------
ii. worker API
-------------
> define Web Worker using 
  new Worker("js/worker.js")

> On 'worker.js' when task done, send data using
  postMessage()
  
> when message received, 'onmessage' event handler triggered .	
 
> This event handler updates the data.

-------------
Example:
-------------
<button onclick="alert('Hellow')">Alert</button>
<p id="demo"></p>
<script>
let w = new Worker("js/worker.js");
w.onmessage  = function(event){
  document.getElementById('demo').innerHTML = event.data;
}
</script>

-------------
js/worker.js
-------------
let i = 0;
while (i<1000000000){
    i++;
}
postMessage(i);

---------
iii. Forms API
---------
checkValidity() 
validationMessage

---------
iv.  Web History API
---------
back() 
forward()
---------
v.   Storage API
---------
localStorage.setItem(data, "John Doe");
sessionStorage.setItem(data, "John Doe");

Example:
--------------
localStorage
--------------
<input type="text" id="js-valu1" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu2" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu3" placeholder="Add Location">
  <br>
  <button onclick="weatherCheck()">Button</button>
  <script>
   let value1 = document.getElementById('js-valu1');
   let value2 = document.getElementById('js-valu2');
   let value3 = document.getElementById('js-valu3');
   function weatherCheck(){
      saveData(value1.value, value2.value, value3.value, );
    }
   function saveData(v1, v2, v3){
     localStorage.setItem('setv1', v1);
     localStorage.setItem('setv2', v2);
     localStorage.setItem('setv3', v3);
   }
   function showData(){
    value1.value = localStorage.getItem('setv1');
    value2.value = localStorage.getItem('setv2');
    value3.value = localStorage.getItem('setv3');
   }
  showData();
  </script>

--------------
localStorage with JSON
--------------
  <input type="text" id="js-valu1" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu2" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu3" placeholder="Add Location">
  <br>
  <button onclick="weatherCheck()">Button</button>
  <button onclick="deleteStorage()">Delete Local Storage</button>
  <script>
   let value1 = document.getElementById('js-valu1');
   let value2 = document.getElementById('js-valu2');
   let value3 = document.getElementById('js-valu3');
   function weatherCheck(){
      saveData({'v1':value1.value, 'v2':value2.value, 'v3':value3.value});
    }
   function saveData(data){
     localStorage.setItem('inputData', JSON.stringify(data));
   }
   function showData(){
     let storeData = localStorage.getItem('inputData');
     let data = JSON.parse(storeData);
     value1.value = data.v1;
     value2.value = data.v2;
     value3.value = data.v3;
   }
  showData();
  function deleteStorage(){
    localStorage.removeItem('inputData');
  }
  </script>
  
--------------
Delete localStorage
-------------- 
  <input type="text" id="js-valu1" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu2" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu3" placeholder="Add Location">
  <br>
  <button onclick="weatherCheck()">Button</button>
  <button onclick="deleteLocalStorage()">Delete Local Storage</button>
  <script>
   let value1 = document.getElementById('js-valu1');
   let value2 = document.getElementById('js-valu2');
   let value3 = document.getElementById('js-valu3');
   function weatherCheck(){
      saveData(value1.value, value2.value, value3.value, );
    }
   function saveData(v1, v2, v3){
     localStorage.setItem('setv1', v1);
     localStorage.setItem('setv2', v2);
     localStorage.setItem('setv3', v3);
   }
   function showData(){
    value1.value = localStorage.getItem('setv1');
    value2.value = localStorage.getItem('setv2');
    value3.value = localStorage.getItem('setv3');
   }
  showData();

  function deleteLocalStorage(){
    localStorage.removeItem('setv1');
    localStorage.removeItem('setv2');
    localStorage.removeItem('setv3');
    value1.value="";
    value2.value="";
    value3.value="";
  }
  </script>

--------------
sessionStorage
--------------
<input type="text" id="js-valu1" placeholder="Add Location">
  <br>
  <button onclick="weatherCheck()">Button</button>
  <script>
   let value1 = document.getElementById('js-valu1');
   function weatherCheck(){
      saveData(value1.value);
    }
   function saveData(v1){
     sessionStorage.setItem('setv1', v1);
   }
   function showData(){
    value1.value = sessionStorage.getItem('setv1');
   }
  showData();
  </script>



--------------
38. Summery
--------------
1. Function Arguments:
Using Funcion Arguments we can access function parameter within the Function.

2. Anonymous Function:
Function without a name called anonymous function.

3.Regular Expressions:
To Search text and replace text we use Regular Expessions.

4. Unary + Operator 

5. Object Accessors
. Getters and setters are the Accessors on JavaScript Object.
. Using Getters and setters we get **Computed Properties**.
. for better data quality we use get and set

6.Object Constructors
Using a function when we create an Object is called Object Constructor.

7. Object Prototypes	

8 call()
. call is Object method. 

9. apply()

10. Closures:
Using Closures we can call a child function from outside the self-invoking Nested Parent function.
  
11. Event Bubbling(Default) or Event Capturing.

--------------
39. FAQ
--------------
How to remove duplicates from an array?
In JavaScript all functions are Method?
Find the largest value from an Array?
--------------
How to remove duplicates from an array?

const x = ['HTML','CSS','JavaScript', 'HTML', 'Bootstrap']  
console.log(new Set([...x]));
//output: ['HTML', 'CSS', 'JavaScript', 'Bootstrap']

--------------
In JavaScript all functions are Method?
--------------
A function belogn to any object called Method. 
since a simple function also belog to the Window Object, 
then the simple function also a Method.
So, Yes all function in JavaScript are Methods.

function myFunction() {
  console.log('This is Function Declarations')
}
myFunction();
window.myFunction();

--------------
Find the largest value from an Array?
--------------
console.log(Math.max.apply(null,[1,2,3]));


--------------
Click Count
--------------
<button id="add" onclick="add()">Click Count 0 </button>
<script>
let x = document.getElementById('add');
let c = 0;
x.addEventListener('click', function(){
c++;
x.innerHTML = `Click Count ${c}`;
})
</script>

--------------
use of 'name' attribute
--------------
<form>
<input type="text" name="display">
<input type="button" value="1" onclick="display.value += '1'" />
<input type="button" value="2" onclick="display.value += '2'" />
<input type="button" value="+" onclick="display.value += '+'" />
<input type="button" value="-" onclick="display.value += '-'" />
</form>
